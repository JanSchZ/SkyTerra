"""
Django settings for skyterra_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Cargar variables de entorno desde .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-oz7k_zw9rjk8qc_01i9ataa7a0-1=z&2pq7=l14lq@w-9)%a&n')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Detect explicit local development context even if DEBUG is accidentally False
# This prevents forcing HTTPS on 127.0.0.1/localhost which breaks CORS/cookies in dev
IS_LOCAL_DEV = DEBUG or any(h in {'localhost', '127.0.0.1'} for h in os.getenv('ALLOWED_HOSTS', '').split(','))

# Determine email verification behaviour upfront so both dj-rest-auth and allauth stay in sync.
_valid_email_verification_modes = {'none', 'optional', 'mandatory'}
_email_verification_env = os.getenv('ACCOUNT_EMAIL_VERIFICATION', '').strip().lower()
if _email_verification_env not in _valid_email_verification_modes:
    _email_verification_env = None

# Default to no forced verification for local development so first-time signups can log in immediately.
ACCOUNT_EMAIL_VERIFICATION_MODE = _email_verification_env or ('none' if IS_LOCAL_DEV else 'mandatory')

# Comma-separated list of domains accepted in production, e.g. "skyterra.cl"
ALLOWED_HOSTS = [host.strip() for host in os.getenv('ALLOWED_HOSTS', '').split(',') if host.strip()]

# Ensure at least localhost is allowed in development mode
if DEBUG:
    if 'localhost' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('localhost')
    if '127.0.0.1' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('127.0.0.1')
    # Allow Codespaces URLs
    if '.app.github.dev' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('.app.github.dev')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Rest Framework
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'corsheaders',
    'django_filters',
    'storages',
    'drf_spectacular',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.apple',

    'properties',   # Nuestra app principal
    'support_tickets', # Nueva app para tickets de soporte
    'payments', # App para cupones y pagos
    'ai_management', # App para gestionar la IA
    'media_manager', # App para presign de media
]

SITE_ID = 1

# URL del cliente para redirecciones (ej. desde Stripe)
CLIENT_URL = os.getenv('CLIENT_URL', 'http://localhost:3000')

# Configuración de dj-rest-auth
# Ensure cookie security matches environment (secure in prod, not in dev)
_jwt_cookie_secure_env = os.getenv('JWT_COOKIE_SECURE')
_jwt_cookie_secure = (_jwt_cookie_secure_env == 'True') if _jwt_cookie_secure_env is not None else (not DEBUG)
# SameSite policy: In local dev behind Vite proxy the browser sees same-origin (localhost:3000),
# but Chrome rejects SameSite=None without Secure over HTTP. Use Lax in dev, None in prod.
_jwt_cookie_samesite = 'None' if (not DEBUG) else 'Lax'

# Configuración adicional de cookies JWT para desarrollo local
if DEBUG:
    # En desarrollo, asegurar que las cookies JWT funcionen con el proxy de Vite
    JWT_AUTH_COOKIE_DOMAIN = None  # No restringir dominio en desarrollo
    JWT_AUTH_COOKIE_PATH = '/'
    JWT_AUTH_COOKIE_HTTPONLY = True
    JWT_AUTH_COOKIE_SECURE = False  # HTTP en desarrollo
    JWT_AUTH_COOKIE_SAMESITE = 'Lax'  # Lax para desarrollo local
    
    # Configuración de sesión para desarrollo
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE = 'Lax'

REST_AUTH_EMAIL_VERIFICATION = 'mandatory' if ACCOUNT_EMAIL_VERIFICATION_MODE == 'mandatory' else 'optional'

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'jwt-access-token',
    'JWT_AUTH_REFRESH_COOKIE': 'jwt-refresh-token',
    # Ensure cookies policy per environment (see _jwt_cookie_samesite above)
    'JWT_AUTH_SAMESITE': _jwt_cookie_samesite,
    'JWT_AUTH_SECURE': _jwt_cookie_secure,
    'TOKEN_MODEL': None, # Disable default token (use JWT)
    'LOGOUT_ON_PASSWORD_CHANGE': True,
    'OLD_PASSWORD_FIELD_ENABLED': True,

    # Keep dj-rest-auth email policy aligned with allauth
    'EMAIL_VERIFICATION': REST_AUTH_EMAIL_VERIFICATION,

    # Serializers
    'LOGIN_SERIALIZER': 'skyterra_backend.serializers.CustomLoginSerializer',
    # Usa tu UserSerializer más detallado para el endpoint /user/
    'USER_DETAILS_SERIALIZER': 'skyterra_backend.serializers.UserSerializer',
    'REGISTER_SERIALIZER': 'skyterra_backend.serializers.CustomRegisterSerializer',
    'PASSWORD_CHANGE_SERIALIZER': 'dj_rest_auth.serializers.PasswordChangeSerializer',
    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',
    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer',
    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer',
    'VERIFY_EMAIL_SERIALIZER': 'dj_rest_auth.registration.serializers.VerifyEmailSerializer',

    # Email and Password Reset
    'PASSWORD_RESET_USE_SITES_DOMAIN': True,
    'PASSWORD_RESET_CONFIRM_URL': CLIENT_URL + '/password-reset-confirm/{uid}/{token}/',
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': False, # For security reasons    
}

# Allow automatic login after registration whenever email verification is not mandatory.
REST_AUTH['LOGIN_AFTER_REGISTER'] = ACCOUNT_EMAIL_VERIFICATION_MODE != 'mandatory'


# Configuración de Django Rest Framework para usar JWT por defecto
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'skyterra_backend.jwt.LenientJWTCookieAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Configuración de Simple JWT
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# allauth configuration
# https://django-allauth.readthedocs.io/en/latest/configuration.html
ACCOUNT_ADAPTER = 'skyterra_backend.adapters.CustomAccountAdapter'
ACCOUNT_EMAIL_VERIFICATION = ACCOUNT_EMAIL_VERIFICATION_MODE
ACCOUNT_EMAIL_REQUIRED = True  # Mantener el correo obligatorio
ACCOUNT_CONFIRM_EMAIL_ON_GET = ACCOUNT_EMAIL_VERIFICATION_MODE == 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[SkyTerra] '
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http' if DEBUG else 'https'
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = ACCOUNT_EMAIL_VERIFICATION_MODE != 'none'
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_LOGIN_METHODS = ['email']  # New recommended setting for login method
# The ACCOUNT_SIGNUP_FIELDS setting is deprecated and has been removed.
# Custom signup logic is handled by the form specified in ACCOUNT_FORMS.
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_RATE_LIMITS = {'login_failed': '5/5m'} # Replaces deprecated login attempt settings
ACCOUNT_FORMS = {
    'signup': 'skyterra_backend.forms.CustomSignupForm',
}

# allauth social login
SOCIALACCOUNT_ADAPTER = 'skyterra_backend.adapters.CustomSocialAccountAdapter'
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
        },
        'VERIFIED_EMAIL': True
    },
    'apple': {
        'APP': {
            'client_id': os.getenv('APPLE_CLIENT_ID'),
            'secret': os.getenv('APPLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': ['name', 'email'],
    },
    'twitter': {
        'APP': {
            'client_id': os.getenv('TWITTER_CLIENT_ID'),
            'secret': os.getenv('TWITTER_CLIENT_SECRET'),
            'key': ''
        },
    },
}

AUTHENTICATION_BACKENDS = [
    # allauth
    'allauth.account.auth_backends.AuthenticationBackend',
    # Django
    'skyterra_backend.backends.EmailOrUsernameModelBackend', # Custom backend
    'django.contrib.auth.backends.ModelBackend', # Default backend
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',  # required for sites framework
    'django.middleware.common.CommonMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'csp.middleware.CSPMiddleware',
]

ROOT_URLCONF = "skyterra_backend.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'skyterra_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Usamos SQLite estándar para desarrollo
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# If DATABASE_URL is provided, use it (PostgreSQL recommended for production)
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=os.getenv('DB_SSL_REQUIRE', 'True') == 'True')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-cl'  # Cambiamos a español de Chile

TIME_ZONE = 'America/Santiago'  # Zona horaria de Chile

USE_I18N = True

USE_TZ = True


# Static & Media files configuration
# In production, if USE_S3 env var is set to 'True', we will serve both static and media files
# from an AWS S3 bucket using django-storages. Otherwise, we fall back to the default filesystem
# setup with optional WhiteNoise for efficient static file serving.

USE_S3 = os.getenv('USE_S3', 'False') == 'True'

if USE_S3:
    # AWS S3 / Cloudflare R2 settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')  # Compatible con Cloudflare R2 u otros
    AWS_S3_SIGNATURE_VERSION = os.getenv('AWS_S3_SIGNATURE_VERSION', 's3v4')
    AWS_S3_ADDRESSING_STYLE = os.getenv('AWS_S3_ADDRESSING_STYLE', 'auto')

    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

    # Use S3 for static and media storage
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # Resolver el dominio/base URL para S3/R2
    _custom_domain = os.getenv('AWS_S3_CUSTOM_DOMAIN')
    if _custom_domain:
        # Caso 1: dominio propio (CDN) provisto
        _base = f"https://{_custom_domain.strip().rstrip('/')}"
    elif AWS_S3_ENDPOINT_URL:
        # Caso 2: endpoint tipo R2 sin dominio propio → usar addressing style path
        _base = f"{AWS_S3_ENDPOINT_URL.rstrip('/')}/{AWS_STORAGE_BUCKET_NAME}"
    else:
        # Caso 3: S3 clásico
        _base = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

    # En nuestra configuración actual los estáticos se subieron a la raíz del bucket
    # (p.ej. 'admin/', 'rest_framework/'). Por eso, apuntamos STATIC_URL a la base.
    STATIC_URL = f"{_base}/"
    # Para media también usamos la base; los prefijos se manejan a nivel de claves
    MEDIA_URL = f"{_base}/"

    # No STATIC_ROOT/MEDIA_ROOT needed when using S3/R2
else:
    # Local/staticfile approach (development or single-instance prod)
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

    # Use WhiteNoise's compressed storage backend for efficient serving
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Prefijo de carga para presign
MEDIA_UPLOADS_PREFIX = os.getenv('MEDIA_UPLOADS_PREFIX', 'uploads/')

# Email configuration for password reset
# IMPORTANT: Replace with your actual email provider's details and credentials.
# For Gmail, you might need to generate an "App Password".
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Example for Gmail
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'YOUR_EMAIL@example.com') # Load from .env or use placeholder
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'YOUR_EMAIL_PASSWORD') # Load from .env or use placeholder
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'SkyTerra <noreply@example.com>') # Load from .env or use placeholder
SERVER_EMAIL = os.getenv('SERVER_EMAIL', DEFAULT_FROM_EMAIL) # For server error notifications
ADMINS = [('Admin', os.getenv('ADMIN_EMAIL', 'admin@example.com'))] # For site admins

# ------------------------------------------------------------------
# CORS / CSRF configuration (cookies with JWT across domains)
# Nota: cuando se usan credenciales (cookies) NO se puede usar '*'.
# Por eso, siempre usamos una lista explícita de orígenes.
CORS_ALLOW_CREDENTIALS = True

_cors_allowed_origins = [o.strip() for o in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if o.strip()]
DEV_DEFAULT_CORS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]

if _cors_allowed_origins:
    CORS_ALLOWED_ORIGINS = _cors_allowed_origins
    if DEBUG:
        for dev_origin in DEV_DEFAULT_CORS:
            if dev_origin not in CORS_ALLOWED_ORIGINS:
                CORS_ALLOWED_ORIGINS.append(dev_origin)
else:
    # Si no se proporcionó variable de entorno, definir explícitamente orígenes en desarrollo
    CORS_ALLOWED_ORIGINS = DEV_DEFAULT_CORS if DEBUG else []

# Importante: cuando se usan credenciales (cookies) el header 'Access-Control-Allow-Origin'
# no puede ser '*'. En desarrollo usamos una lista explícita de orígenes permitidos
# definida en CORS_ALLOWED_ORIGINS (arriba). No activar allow-all.

# Headers adicionales para CORS
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'cache-control',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Permitir métodos HTTP necesarios
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = False

_csrf_trusted = [o.strip() for o in os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if o.strip()]
if _csrf_trusted:
    CSRF_TRUSTED_ORIGINS = _csrf_trusted
elif DEBUG:
    # Default trusted origins for local dev when env var is not set
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ]

if not DEBUG:
    # Secure cookies for cross-site usage (required for cookies with frontend on different domain)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SAMESITE = 'None'

    # HTTPS hardening
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ------------------------------------------------------------------
# Security / Clickjacking – permitir incrustar tours (HTML) en iframe
if DEBUG:
    X_FRAME_OPTIONS = 'ALLOWALL'  # Permitir iframes en desarrollo
else:
    # En producción permitir solo mismo origen; use CSP para whitelistar orígenes adicionales
    X_FRAME_OPTIONS = 'SAMEORIGIN'
# Simple CSP allow-list for frames
client_url = os.getenv('CLIENT_URL', 'http://localhost:3000')
CSP_FRAME_ANCESTORS = ("'self'", "https://www.youtube.com", client_url)
SECURE_REFERRER_POLICY = os.getenv('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')

# allauth settings for social authentication (Google, Apple, Twitter)
SOCIALACCOUNT_ENABLED = True # Habilitar cuentas sociales

# Cargar la clave de API de Google Gemini para búsquedas IA
google_gemini_api = os.getenv('GOOGLE_GEMINI_API_KEY')
if not google_gemini_api and DEBUG:
    import logging; logging.warning('La variable de entorno GOOGLE_GEMINI_API_KEY no está configurada.')
GOOGLE_GEMINI_API_KEY = google_gemini_api

# Stripe
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')

# Coinbase Commerce (Bitcoin) – optional
COINBASE_COMMERCE_API_KEY = os.getenv('COINBASE_COMMERCE_API_KEY', '')
COINBASE_COMMERCE_WEBHOOK_SECRET = os.getenv('COINBASE_COMMERCE_WEBHOOK_SECRET', '')
COINBASE_COMMERCE_DEFAULT_CURRENCY = os.getenv('COINBASE_COMMERCE_DEFAULT_CURRENCY', 'USD')

# Bitcoin payments via Coinbase Commerce (empresa establecida con compliance)

# ------------------------------------------------------------------
# Security settings para producción (Django deployment checklist)
if not DEBUG:
    # HTTPS obligatorio en producción
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 año
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookies seguras
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Content type sniffing protection
    SECURE_CONTENT_TYPE_NOSNIFF = True
    
    # XSS protection
    SECURE_BROWSER_XSS_FILTER = True
    
    # Referrer policy
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# ------------------------------------------------------------------
# Override: never force HTTPS redirects in local development
if IS_LOCAL_DEV:
    SECURE_SSL_REDIRECT = False

# ------------------------------------------------------------------
# Cache configuration
_redis_url = os.getenv('REDIS_URL')
if _redis_url:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': _redis_url,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'TIMEOUT': 300,  # 5 minutos por defecto
        }
    }
else:
    # Fallback seguro para entornos locales sin Redis
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'skyterra-locmem-cache',
            'TIMEOUT': 300,
        }
    }

# ------------------------------------------------------------------
# Logging configuration (básica a consola)
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {asctime} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'properties': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'ai_management': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# ------------------------------------------------------------------
# Admin notification emails
ADMIN_NOTIFICATION_EMAILS = [e.strip() for e in os.getenv('ADMIN_NOTIFICATION_EMAILS', '').split(',') if e.strip()] or [DEFAULT_FROM_EMAIL]
