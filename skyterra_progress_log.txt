## SkyTerra Project - Progress and Issue Log

**NOTA PARA EL USUARIO/DESARROLLADOR:** Por favor, actualiza este archivo a medida que se completan las tareas o surgen nuevos problemas. Esto ayudar√° a mantener un seguimiento claro del progreso y facilitar√° la colaboraci√≥n, incluso si trabajas con diferentes asistentes de IA o en diferentes sesiones. Marca las tareas completadas con `[COMPLETADO]` o `[RESUELTO]`.

**Fecha de √öltima Actualizaci√≥n:** 2025-06-13 (PropertyDetails.jsx actualizado con soporte de arriendo, en curso filtros de modalidad; Backend documentos: Modelo y API completados; pendiente approve/reject)

### **PLAN DE IMPLEMENTACI√ìN GLOBAL AJUSTADO**

**Principios Gu√≠a:**
1.  Estabilidad y Seguridad PRIMERO.
2.  Funcionalidad Core para el MVP (Producto M√≠nimo Viable) y Experiencia IA Central despu√©s.
3.  Mejoras UX incrementales y continuas.
4.  Expansi√≥n a largo plazo (m√≥vil, internacionalizaci√≥n).

---

**Fase 0: Estabilizaci√≥n Inmediata (Urgente)**
*   **Objetivo:** Asegurar una base t√©cnica s√≥lida y resolver problemas cr√≠ticos antes de a√±adir nuevas funcionalidades mayores.
*   **Tareas:**
   
    1.  **[COMPLETADO - 12 Jun 2025]** üõ† Migraci√≥n MUI Grid v2.
        *   **Subtarea:** `AdminDashboardPage.jsx` y resto de componentes revisados; todos usan Grid de `@mui/material` correctamente.
        *   **Subtarea:** Revisi√≥n global completa, sin instancias restantes de Grid v1.
    2.  **[RESUELTO - 12 Jun 2025]** üêõ Error "Maximum update depth exceeded" en `MapView.jsx`.
        *   **Contexto:** Ajustes en dependencias de `useEffect` verificados en pruebas locales; no se reproduce el error.
    3.  **[RESUELTO - 12 Jun 2025]** Vistas admin placeholders iniciales reemplazadas (Usuarios, Propiedades, Tickets, Configuraci√≥n) y API tickets creada.

---

**Fase 1: N√∫cleo de Negocio y Experiencia IA Central (M√°xima Prioridad)**
*   **Objetivo:** Implementar las funcionalidades centrales que definen la propuesta de valor de SkyTerra, con un fuerte √©nfasis en la b√∫squeda inteligente y la versatilidad del listado de propiedades.
*   **Tareas:**
    1.  **[EN PROGRESO]** üß† **IA Search Bar - Experiencia Central (Alcance Extendido):**
        *   **Subtarea (Backend):** Se a√±adi√≥ l√≥gica en `AISearchView` para interpretar consultas complejas mediante `GeminiService` y devolver top-3 propiedades (commit 12-Jun-2025).
        *   **Subtarea (Backend):** Pendiente integraci√≥n con APIs geoespaciales externas.
        *   **Subtarea (Frontend):** Pendiente UI de resultados y fly-to.
        *   **Subtarea (IA/Contenido):** Pendiente FAQs.
        *   **Estado:** Backend funcional b√°sico, faltan refinamientos y frontend.
    2.  **[EN PROGRESO]** ‚ûï Soporte para Arriendo/Alquiler:
        *   **Backend:** Modelo `Property` y serializers actualizados (campos `listing_type`, `rent_price`, `rental_terms`). Falta aplicar migraciones en entorno de producci√≥n.
        *   **Frontend:**
            *   **[COMPLETADO]** Formulario `PropertyForm` con select de modalidad y campos condicionales `rentPrice` y `rentalTerms`.
            *   **[COMPLETADO]** Servicio API mapea correctamente los nuevos campos.
            *   **[COMPLETADO]** `PropertyCard` muestra precio seg√∫n modalidad (venta o arriendo).
            *   **[COMPLETADO - 13 Jun 2025]** Actualizar `PropertyDetails.jsx` para exhibir modalidad y precio de arriendo.
            *   **[COMPLETADO - 13 Jun 2025]** Se a√±adi√≥ pesta√±a "Documentos" en `PropertyForm.jsx` para permitir subida de PDFs, DOC y planos (hasta 10 archivos). UI con listado, remover y alerta informativa.
            *   **[COMPLETADO - 13 Jun 2025]** Backend: Modelo `PropertyDocument` implementado (relaci√≥n 1-a-N), con campos `file`, `doc_type`, `description`, `uploaded_at`.
            *   **[COMPLETADO - 13 Jun 2025]** API: Se a√±adi√≥ `PropertyDocumentViewSet` (CRUD), ruta `/api/documents/`, serializer y registro en `urls.py`; `PropertySerializer` actualizado y manejo de `new_documents` en vistas.
            *   **[EN PROGRESO - 13 Jun 2025]** Backend: Acciones `approve` / `reject` a√±adidas a `PropertyDocumentViewSet`; actualizaci√≥n de estado y transici√≥n autom√°tica de `publication_status`.
            *   **[PENDIENTE]** Admin UX: Panel React para revisar documentos y botones aprobar/rechazar.
            *   **[PENDIENTE]** Notificaciones: Email al propietario cuando su propiedad cambia de estado (pendiente ‚Üí approved/rejected).
            *   **[PENDIENTE]** Frontend: Mostrar estado de verificaci√≥n y lista de documentos subidos en `PropertyDetails.jsx` (s√≥lo para owner y admin).
            *   **[DESCARTADO - 13 Jun 2025]** Filtros manuales eliminados del UI principal; la IA gestionar√° filtros internamente.
        *   **Admin:**
            *   **[PENDIENTE]** Ajustar vistas de propiedades para listar y filtrar por modalidad.
        *   **QA:**
            *   **[PENDIENTE]** Ejecutar y verificar migraciones (`makemigrations` + `migrate`).
    3.  **[EN PROGRESO]** üìà **M√©trica de Plusval√≠a Inteligente (Recovery Score‚Äêstyle):**
        *   **Backend:** Campo `plusvalia_score` en modelo `Property` con c√°lculo autom√°tico; migraciones pendientes de aplicar.
        *   **Servicio `PlusvaliaService` v2:** Combina 10 factores (valor de mercado externo, tasa apreciaci√≥n hist√≥rica, demanda interna por visitas, precio/hect√°rea, agua, vistas, tama√±o, proximidad, modalidad, IA). Integra **ClearAVM / Property Valuation API** para AVM y apreciaci√≥n hist√≥rica [fuente](https://www.clearcapital.com/products/property-valuation-api/). **Completado** (stub externo, pesos iniciales, c√°lculos y fallback a neutro).
        *   **Demanda:** Nuevo modelo `PropertyVisit` para registrar vistas; falta endpoint y frontend para registrar cada visualizaci√≥n de detalle de propiedad.
        *   **Seguridad:** `plusvalia_score` solo visible para usuarios `is_staff`.
        *   **Frontend:** Pendiente mostrar m√©trica en vistas admin y dashboard.
        *   **Pr√≥ximos pasos:** Ajustar pesos tras recopilar datos reales y conectar servicios externos en entorno prod.
    4.  **[PENDIENTE]** üë§ **Creaci√≥n de Cuenta Admin por Defecto:**
        *   **Subtarea (Backend):** Implementar un script, `management command`, o proceso de inicializaci√≥n para crear un superusuario con `username='admin'` y `password='SkyTerra3008%'` (la contrase√±a debe ser manejada de forma segura, idealmente establecida en el primer despliegue o mediante variables de entorno para el admin inicial).

---

**Fase 2: Funcionalidades de Usuario, Comunidad y UX Esencial (Alta Prioridad)**
*   **Objetivo:** Enriquecer la interacci√≥n del usuario con la plataforma y mejorar la usabilidad general.
*   **Tareas:**
    1.  **[PENDIENTE]** ‚ù§Ô∏è **Funcionalidad de Favoritos/Guardados:**
        *   Permitir a usuarios registrados guardar propiedades.
        *   Backend: Modelo para favoritos, API endpoints.
        *   Frontend: Bot√≥n "Guardar" en cards/details, icono distintivo.
    2.  **[PENDIENTE]** üë§ **P√°gina de Perfil de Usuario (B√°sica):**
        *   Para compradores/arrendatarios: Ver favoritos, gestionar datos b√°sicos de perfil.
        *   Para vendedores/propietarios: Ver y gestionar sus publicaciones (venta y arriendo), datos de perfil.
        *   Requiere l√≥gica de autenticaci√≥n y roles.
    3.  **[PENDIENTE]** üí¨ **Mensajer√≠a Interna (B√°sica) o Flujo de Contacto Mejorado:**
        *   Dise√±ar e implementar un sistema para que los usuarios puedan contactar a los publicadores sobre propiedades espec√≠ficas.
        *   Considerar si se implementa un chat interno completo o un formulario de contacto robusto con notificaciones por email al propietario.
    4.  **[PENDIENTE]** ‚ú® **Feedback Visual Claro y Consistente:**
        *   Revisar y mejorar el uso de Snackbars, loaders, modales de confirmaci√≥n, y mensajes de √©xito/error en toda la aplicaci√≥n para una UX m√°s pulida.
    5.  **[PENDIENTE]** üè° **Redise√±o UI `Dashboard.jsx` (Panel de Usuario Propietario/Vendedor/Admin):**
        *   Aplicar dise√±o minimalista y moderno con cards para propiedades.
        *   Paginaci√≥n. Bot√≥n "Crear Nueva Propiedad".
        *   Asegurar que la UX est√© personalizada seg√∫n el rol del usuario logueado (qu√© acciones y vistas est√°n disponibles).

---

**Fase 3: Expansi√≥n de Funcionalidad y Maduraci√≥n (Media Prioridad)**
*   **Objetivo:** A√±adir funcionalidades m√°s complejas y refinar la plataforma.
*   **Tareas:**
    1.  **[PENDIENTE]** üí≥ **Implementar Sistema de Transacciones B√°sico:**
        *   **Primero:** Definici√≥n clara del alcance (¬øSon ofertas formales, reservas, un sistema de pago inicial?).
        *   Dise√±o detallado de la UX y los flujos antes de la implementaci√≥n.
        *   Backend: Modelos, l√≥gica de negocio, posibles integraciones con pasarelas de pago.
        *   Frontend: Interfaz para gestionar estas transacciones.
    2.  **[PENDIENTE]** üé® **Unificar Tema Oscuro y Estilo Visual Globalmente:**
        *   Asegurar consistencia de dise√±o, tipograf√≠a, colores, y componentes en toda la aplicaci√≥n.
    3.  **[PENDIENTE]** üì± **Optimizaci√≥n M√≥vil Detallada (para la Web App) y Pruebas de Accesibilidad.**
        *   Asegurar que la PWA o web app sea completamente responsive y accesible.
    4.  **[PENDIENTE]** üí° **Onboarding/Ayuda R√°pida para nuevos usuarios:**
        *   Tooltips, gu√≠as interactivas cortas, o integraci√≥n con la IA para ayudar a los usuarios a entender c√≥mo usar las funciones clave.

---

**Fase 4: Crecimiento y Plataformas Adicionales (Largo Plazo / Estrat√©gico)**
*   **Objetivo:** Expandir el alcance y las capacidades de SkyTerra.
*   **Tareas:**
    1.  **[PENDIENTE]** üìä **Panel Anal√≠tico para Administradores:**
        *   Estad√≠sticas sobre propiedades, usuarios, b√∫squedas, etc.
    2.  **[PENDIENTE]** üîî **Notificaciones Avanzadas (Email/In-app):**
        *   Alertas personalizadas, res√∫menes, etc.
    3.  **[PENDIENTE]** üåç **Internacionalizaci√≥n:**
        *   Soporte para m√∫ltiples idiomas (ej. ingl√©s) en contenido y UI.
    4.  **[PENDIENTE]** üì± **Desarrollo de Aplicaciones M√≥viles Nativas (Android & iOS):**
        *   **Consideraciones Iniciales:**
            *   **Alcance MVP M√≥vil:** Definir funcionalidades esenciales para la v1 de las apps.
            *   **Tecnolog√≠a:** Evaluar React Native, Flutter, o Nativo (Swift/Kotlin).
            *   **API Backend:** Debe estar preparada para soportar clientes m√≥viles.
            *   **Dise√±o UX/UI Espec√≠fico para M√≥vil:** No una simple adaptaci√≥n de la web.
            *   **Gesti√≥n de Estado y Datos Offline:** Considerar si se requiere.
            *   **Push Notifications:** Planificar integraci√≥n (FCM/APNs).
            *   **Recursos:** Evaluar necesidades de equipo.

---

**Historial de Cambios Recientes en el Log:**
*   2025-06-12: Migraci√≥n MUI Grid finalizada y bug de MapView resuelto tras pruebas.
*   2025-06-12: A√±adida l√≥gica de IA en `AISearchView` para devolver top 3 sugerencias basadas en BD.
*   2025-06-12: Detectadas vistas admin placeholders vac√≠as; se registra como NUEVO issue en Fase 0.
*   2025-05-29: Reestructuraci√≥n completa del plan en Fases (0 a 4).
*   2025-05-29: Elevada prioridad y alcance de la "IA Search Bar - Experiencia Central" a Fase 1.
*   2025-05-29: Integrado "Soporte para Arriendo/Alquiler" como alta prioridad en Fase 1.
*   2025-05-29: A√±adida tarea "Creaci√≥n de Cuenta Admin por Defecto" a Fase 1.
*   2025-05-29: A√±adida "Desarrollo de Aplicaciones M√≥viles Nativas (Android & iOS)" a Fase 4 con consideraciones iniciales.
*   2025-05-29: Re-priorizadas otras tareas seg√∫n el nuevo enfoque estrat√©gico.
*   2025-05-30: Actualizado el estado de los puntos 3 y 4 de la Fase 0 (edificios 3D resuelto, error de update depth pospuesto/no prioritario).
*   **[RESUELTO - 3 Jun 2025]** üêõ **BUG DE REGISTRO DE USUARIOS SOLUCIONADO:**
    * **Problema identificado:** Bug que imped√≠a crear nuevas cuentas de usuario
    * **Causa ra√≠z:** 
        - Migraciones de Django no aplicadas completamente
        - Configuraci√≥n incorrecta de URLs en entorno Codespaces
        - Manejo de errores insuficiente en frontend y backend
    * **Soluciones implementadas:**
        1. ‚úÖ Aplicaci√≥n completa de migraciones Django
        2. ‚úÖ Mejora en detecci√≥n autom√°tica de entorno (Codespaces vs localhost)
        3. ‚úÖ Validaciones mejoradas en formulario de registro:
            - Email √∫nico y formato v√°lido
            - Username con caracteres permitidos (3+ chars)
            - Contrase√±a segura (8+ chars, may√∫s/min√∫s/n√∫mero)
        4. ‚úÖ Logging detallado para debugging en backend y frontend
        5. ‚úÖ Mejor manejo de errores con mensajes espec√≠ficos
    * **Testing realizado:**
        - Endpoint `/api/auth/register/` funciona correctamente
        - Formulario frontend valida datos correctamente
        - Respuestas de error claras y espec√≠ficas
        - Usuarios creados exitosamente (IDs 5, 6 durante testing)
    * **Estado:** Completamente funcional
    * **Pr√≥ximos pasos:** Continuar con testing de flujo completo registro ‚Üí login ‚Üí dashboard
*   2025-06-12: Rutas de administraci√≥n actualizadas en `App.jsx` para integrar Usuarios, Propiedades detalladas, Tickets y Configuraci√≥n.
*   2025-06-12: Implementada lista de Tickets en Admin y API REST para tickets (endpoints /api/admin/tickets/).
*   2025-06-12: Backend de soporte para arriendo actualizado (campos nuevos en Property y serializers).
*   2025-06-12: Frontend integrado con soporte de arriendo en formulario y card; pendiente detalles y filtros.
*   2025-06-13: A√±adido `plusvalia_score` con c√°lculo IA + datos externos; modelo `PropertyVisit`; servicio `ExternalMarketDataService` y actualizaci√≥n de `PlusvaliaService` v2.
*   2025-06-13: Actualizado Fase 1 con la nueva tarea 'M√©trica de Plusval√≠a Inteligente'.

---

## **PLAN DE DESPLIEGUE A PRODUCCI√ìN (AWS)**

> **Objetivo:** Tener un entorno productivo robusto, seguro y escalable en AWS para el MVP de SkyTerra antes de Q3-2025.

### 1. Arquitectura Propuesta (Alta Disponibilidad)
* **VPC** con subredes p√∫blicas y privadas en 2 AZ (us-east-1a / 1b)
* **ALB (Application Load Balancer)** frente a 2√ó instancias **EC2** (Autoscaling group) con Docker + Gunicorn + Nginx (Backend Django)
* **RDS PostgreSQL** (Multi-AZ, gp3  db.t3.medium, backups 7 d√≠as)
* **Elasticache Redis** (para sesiones y caching)
* **S3**: Media (im√°genes, tours, documentos) + versi√≥n ‚Äë> CloudFront para servir est√°tico
* **S3** bucket adicional para artefactos de CI/CD (builds)
* **Route 53** para DNS (skyterra.cl, api.skyterra.cl, cdn.skyterra.cl)
* **ACM** ‚Äì TLS certificados para ALB y CloudFront
* **ECR** para almacenamiento de im√°genes Docker
* **AWS Step Functions + Lambda (futuro)** para procesamiento pesado (ej: IA, generador de thumbnails)

### 2. Flujo CI/CD (GitHub Actions)
1. **build_frontend**: `npm ci ‚Üí npm run build` ‚Üí artefacto comprimido ‚Üí upload a S3 (`frontend-builds/commitSHA.zip`)
2. **build_backend**: `docker build` ‚Üí push a ECR con tag commitSHA
3. **deploy_staging** (branch *develop*):
   * EB CLI √≥ ECS task (Fargate) actualiza containers 
   * Frontend build sin compresi√≥n, servido por CloudFront-dev
   * Corre migraciones `python manage.py migrate --noinput`
   * Smoke tests (`pytest -m smoke`)
4. **deploy_prod** (merge *main* + tag vX.Y.Z):
   * Blue-green en EC2 ASG ‚Üí health-check antes de cortar tr√°fico
   * Frontend build se sube a bucket S3-prod y se invalida CloudFront
   * Migraciones + comando para crear superadmin si no existe
   * Notificaci√≥n Slack (#deploys) con changelog auto-generado

### 3. Seguridad y Gobernanza
* **IAM roles** m√≠nimos (EC2, GitHub OIDC)
* SG restrictivos (solo ALB ‚Üí EC2, EC2 ‚Üí RDS/Redis)
* Secrets en **AWS Secrets Manager** (DB creds, email SMTP)
* **WAF** delante de ALB + reglas OWASP top-10
* Backups automatizados (RDS + S3 lifecycle)
* **CloudTrail** & AWS Config habilitados

### 4. Observabilidad / DevOps
* **CloudWatch Logs** + m√©tricas custom (latencia API, errores 5xx, duraci√≥n de migraciones)
* **Prometheus + Grafana Cloud** (opcional) para m√©tricas de aplicaci√≥n
* **Sentry** para errores JS y Django
* **StatusCake** (heartbeat)

### 5. Costeo Estimado Mensual (USD)
| Componente | Inicial | Escalable |
|------------|---------|-----------|
| EC2 t3.medium √ó2 | $35 | +$35 por inst extra |
| RDS db.t3.medium | $75 | seg√∫n storage |
| ALB | $20 | tr√°fico |
| S3 + CloudFront | $10 | uso |
| Otros (Redis, transfer, backups) | $15 | uso |
| **Total** | **‚âà $155** | variable |

### 6. Roadmap Pr√≥ximos Pasos
1. **[PENDIENTE]** Crear repo `skyterra-infra` con Terraform IaC (modular)
2. **[PENDIENTE]** Configurar GitHub Actions con OIDC hacia AWS
3. **[PENDIENTE]** Dockerizar backend (multi-stage) y frontend (Nginx static)
4. **[PENDIENTE]** Implementar S3 storage en Django (`django-storages`, presigned URLs)
5. **[PENDIENTE]** Configurar CloudFront + custom domain para frontend
6. **[PENDIENTE]** Ajustar CORS y CSRF (api.skyterra.cl ‚Üî app)
7. **[PENDIENTE]** Pruebas de carga (k6) antes de GA
8. **[PENDIENTE]** Revisi√≥n de seguridad por OWASP ZAP
9. **[PENDIENTE]** Manual de rollback y playbook incidentes

### 7. Brechas Detectadas en Revisi√≥n 13-Jun-2025
Tras revisar frontend y backend actuales se identifican los siguientes vac√≠os adicionales:

1. **Filtros de Modalidad (Venta/Arriendo)**
   * Falta en SearchBar y en lista de resultados (`PropertyList`, `MapResultsOverlay`).
   * Endpoint backend ya acepta `listing_type` en `filterset_fields`, solo falta consumirlo.

2. **Gesti√≥n de Documentos en Admin**
   * Crear vista `AdminDocumentsReviewPage.jsx` dentro de `/admin` para aprobar/rechazar documentos.
   * **[EN PROGRESO]** Endpoint backend: `PropertyDocumentViewSet` implementado (CRUD). Pendiente a√±adir acciones `approve` / `reject` y l√≥gica de verificaci√≥n.

3. **Visibilidad de Documentos para Propietario**
   * En `Dashboard.jsx` y `PropertyDetails.jsx` (si owner==viewer) mostrar lista y estado de verificaci√≥n.

4. **Flujo de Correo de Verificaci√≥n de Cuenta**
   * Implementar correo con token JWT y endpoint `verify-email/`.

5. **Funcionalidad de Favoritos (dependiente de Fase 2)**
   * Modelo `Favorite`, endpoints `/favorites/`, bot√≥n en `PropertyCard` y `PropertyDetails`.

6. **Mensajer√≠a / Contacto**
   * API `Conversation` + WebSocket (Django Channels) o fallback email.
   * UI: Chat minimal en `PropertyDetails`.

7. **Accesibilidad y SEO**
   * Revisar `alt` en im√°genes, contraste WCAG AA, meta tags React Helmet.

8. **Pruebas Autom√°ticas**
   * Aumentar cobertura Jest (frontend) y PyTest (backend) a >70 %.

9. **Pol√≠ticas de Retenci√≥n de Datos**
   * GDPR ‚Äì p√°gina Privacy Policy, endpoint `delete-account` y anonimizaci√≥n.

10. **Configuraci√≥n PWA**
   * `manifest.json`, Service Worker con precache de rutas cr√≠ticas.

11. **Optimizaci√≥n Build & Calidad de C√≥digo**
    * Configurar ESLint + Prettier pre-commit (husky) y CI.
    * Dividir c√≥digo con React.lazy/Suspense y Vite chunks para reducir TTFB.

12. **Error Boundaries Globales**
    * Crear componente `AppErrorBoundary` y log a Sentry.

Cada punto se a√±adir√° a la fase correspondiente durante planificaci√≥n semanal.

> Todas las tareas marcadas `[PENDIENTE]` se ir√°n trasladando a las Fases correspondientes conforme avance la implementaci√≥n.
